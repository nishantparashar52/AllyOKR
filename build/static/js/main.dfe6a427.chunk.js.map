{"version":3,"sources":["redux/actions/index.js","redux/sagas/user.js","redux/sagas/index.js","Util.js","redux/reducers/userReducer.js","redux/reducers/index.js","components/Filters/index.js","components/Modal/index.js","components/List/index.js","components/User/index.js","App.js","index.js","store.js"],"names":["types","fetchUserData","user","call","axios","get","response","put","type","data","console","log","all","takeLatest","rootSaga","formattedData","finalData","filters","i","length","dataIndex","parentLength","parent_objective_id","push","category","initialState","prevState","action","Object","assign","loading","userData","filterData","combineReducers","Filters","getFilters","className","onClick","e","keys","map","item","index","key","data-value","id","name","value","htmlFor","Modal","closeModal","List","getData","toggleData","showModal","childData","children","title","JSON","stringify","dispatch","useDispatch","useSelector","state","useState","setData","modalData","setModalData","useEffect","viewBox","width","height","fill","filterName","targetValue","target","parentNode","dataset","classList","contains","remove","add","parse","App","store","sagaMiddleware","createSagaMiddleware","middleware","enhancers","compose","applyMiddleware","createStore","reducers","run","mySaga","configureStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfe6a427.chunk.js","sourcesContent":["export const types = {\n    FETCH_USER_LOAD: 'FETCH_USER_LOAD',\n    FETCH_USER_SUCCESS: 'FETCH_USER_SUCCESS',\n    FETCH_USER_FAIL: 'FETCH_USER_FAIL'\n  };\n  \n  export function fetchData() {\n    return { type: types.FETCH_USER_LOAD };\n  }","import { call, put, takeLatest, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { types } from '../actions';\n\nexport function* fetchUserData() {\n  try {\n    const url = `https://okrcentral.github.io/sample-okrs/db.json`;\n    const response = yield call(axios.get, url);\n    yield put({\n      type: types.FETCH_USER_SUCCESS,\n      data: response.data\n    });\n  } catch (error) {\n    console.log('Request failed! Could not fetch dictionary data.');\n    yield put({\n      type: types.FETCH_USER_FAIL,\n      data: error\n    });\n  }\n}\n\nexport function* user() {\n  yield all([\n    takeLatest(types.FETCH_USER_LOAD, fetchUserData)\n  ])\n}","import { all } from 'redux-saga/effects';\n\nimport { user } from './user';\n\nexport default function* rootSaga() {\n    yield all ([\n        user()\n    ]);\n}","export const formattedData = data => {\n    let finalData = []; // to get the list data\n    let filters = {}; // to get the filtered data\n    for(let i = 0; i < data.length; i++) {\n        const dataIndex = data[i];\n        const parentLength = finalData.length - 1;\n        if(dataIndex.parent_objective_id === '') {\n            finalData.push(dataIndex);\n            if(!filters[dataIndex.category]) filters[dataIndex.category] = [dataIndex];\n            else filters[dataIndex.category].push(dataIndex);\n        } else {\n            if(finalData[parentLength][\"children\"]) finalData[parentLength][\"children\"].push(dataIndex);\n            else finalData[parentLength][\"children\"] = [dataIndex];\n        }\n    }\n    return { finalData, filters};\n}\n\n/* Why I thought of using two data \n1. finalData will have all the data in tree format to show the accordion\nand children inside it.\n\n2. FilterData is used to get the data under filters;\nex: {\"Marketing\": [], Sales: [], ...} keys will be used as a filters\nKeys are the category\n*/\n","import { formattedData } from '../../Util';\nconst initialState = {\n\n}\n\nconst user = (prevState = initialState, action) => {\n    switch(action.type) {\n        case 'FETCH_USER_LOAD':\n            return Object.assign({}, prevState, {\n                loading: true\n            });\n        case 'FETCH_USER_SUCCESS':\n            let {finalData, filters} = formattedData(action.data.data); // to format the data\n            return Object.assign({}, prevState, {\n                loading: false,\n                userData: finalData,\n                filterData: filters\n            });\n        default:\n            return prevState;\n    };  \n}\nexport default user;\n","import { combineReducers } from 'redux';\nimport user from './userReducer';\n\nexport default combineReducers({\n    user\n})","import React from 'react';\nimport './Filters.scss';\n\nexport const Filters = ({ filterData, getFilters }) => {\n    return (\n        <div className=\"filters\" onClick={e => getFilters(e)}>\n            {Object.keys(filterData).map((item, index) =>\n                <div key={index} data-value={item}><input className=\"filterRadio\" type=\"radio\" id={item} name=\"filter_name\" value={item} />\n                Â  <label className=\"filterLabel\" htmlFor={item} data-value={item}>{item}</label></div>\n            )}\n        </div>\n    );\n};","import React from 'react';\nimport './Modal.scss';\nexport const Modal = ({ data, closeModal }) => {\n    return (\n        <div className=\"modal\">\n            <div className=\"modalContent\">\n                <div className=\"modalHeader\">\n                    <span onClick={closeModal} className=\"crossIcon\"></span>\n                </div>\n                <div className=\"modalBody\">\n                    {Object.keys(data).map((item, index) => {\n                        return (\n                            <div key={index}><span className=\"title\">{item}: </span>{data[item]}</div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './List.scss';\n\nexport const List = ({getData, toggleData, showModal}) => {\n    return (\n        <>\n        {getData.map((item, key) => {\n            let childData = item.children;\n            return (\n            <div key={key} className=\"parent\" onClick={toggleData}>{key + 1}. {item.title}\n            <div className=\"children\" onClick={showModal}>\n            {childData && childData.map((item, index) => {\n                return <div key={`${key}_${index}`} className={`childList ${index % 2 === 0 ? 'even' : ''}`} data-value={JSON.stringify(item)}>{key + 1}.{index + 1}. {item.title}</div>\n            })}\n            </div>\n            </div>\n            );\n        })}\n        </>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchData } from '../../redux/actions'\nimport { Filters } from '../Filters';\nimport { Modal } from '../Modal';\nimport { List } from '../List';\nimport './User.scss';\n\nexport default () => {\n    const dispatch = useDispatch();\n    const { userData, filterData, loading } = useSelector(state => state.user);\n    const [getData, setData] = useState(userData);\n    const [modalData, setModalData] = useState(null);\n\n    useEffect(() => {\n        dispatch(fetchData());\n    }, [dispatch]);\n\n    useEffect(() => {\n        if(userData && userData.length > 0) setData(userData);\n    }, [userData]);\n\n    const getFilters = filterName => {\n        const targetValue = filterName.target.parentNode.dataset.value;\n        if(targetValue) setData(filterData[targetValue]);\n    }\n\n    const toggleData = e => {\n        const className = e.target.classList;\n        if(className.contains('parent')) {\n            if(className.contains('toggle')) className.remove('toggle');\n            else className.add('toggle');\n        }\n    }\n\n    const showModal = e => {\n        setModalData(JSON.parse(e.target.dataset.value));\n    }\n    return (\n    <div>\n        {loading ?\n        <svg className=\"svgLoader\" viewBox=\"0 0 1024 1024\" width=\"10em\" height=\"10em\">\n            <path fill=\"lightblue\" />\n        </svg> :\n        <>\n            {filterData && Object.keys(filterData).length > 0 &&\n            <Filters filterData={filterData} getFilters={getFilters}/>}\n            {modalData && <Modal data={modalData} closeModal={() => setModalData(false)}/>}\n            {getData && getData.length > 0 && <List getData={getData} toggleData={toggleData} showModal={showModal} />}\n        </>\n        }\n    </div>\n    );\n};","import React from 'react';\nimport User from './components/User/index';\n\nexport default App => {\n    return (\n        <User />\n    )\n};","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport App from './App';\n\nconst store = configureStore();\n\nrender(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('container'));\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport mySaga from './redux/sagas';\nimport reducers from './redux/reducers';\n\nexport default function createStoreWithMiddleware() {\n    const sagaMiddleware = createSagaMiddleware();\n    const middleware = [sagaMiddleware];\n\n    const enhancers = compose(\n        applyMiddleware(...middleware)\n    );\n\n    const store = createStore(reducers,enhancers);\n\n    sagaMiddleware.run(mySaga);\n    return store;\n}\n"],"sourceRoot":""}